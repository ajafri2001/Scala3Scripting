/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.14/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the java-library plugin for API and implementation separation.
    id 'java-library'
    // code coverage jacoco
    id 'jacoco'
}


// the maven identifiers
group = 'org.zoomba-lang'
version = '0.1-SNAPSHOT'

base{
    archivesName = 'scala3-scripting'
}


repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

ext {
    scala3_version = '3.6.4'
}

dependencies {
    // Use JUnit test framework.
    testImplementation libs.junit

    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api libs.commons.math3

    implementation "org.scala-lang:scala3-compiler_3:$scala3_version"
    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation libs.guava
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

test {
    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
    }
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    reports {
        xml.required = false
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [] )
        }))
    }
}

jar {
    // Keep jar clean:
    exclude 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA', 'META-INF/*.MF'
    manifest {
        attributes "cowj-build-on" : new Date().format('yyyy-MM-dd HH:mm:ss'), // setup the build time to be absolutely sure
                'Class-Path': configurations.runtimeClasspath.files.collect { "deps/$it.name" }.join(' ')
    }
    // to execute anything, go to the libs folder, and then do java -jar cowj
    // the deps folder should have all dependencies
}
